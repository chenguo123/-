#include<stdio.h>
#include<string.h>
#include<stdlib.h>

struct link*AppendNode(struct link *head);//声明单向链表
void DisplyNode(struct link *head);//显示单向链表
struct link*DeleteNode(struct link *head, int nodedata);//删除单向链表
void DeleteMemory(struct link *head);//释放内存
struct link*InsertNode(struct link*head,int nodedata);//在单向链表中插入元素
struct link*SortNode(struct link*head);//单向链表排序
int LengthNode(struct link *head);//统计链表中数据个数
struct link*reverse(struct link *head);//链表反转
void searchmid(struct link *head);//链表中查找
struct link
{
	int data;
	struct link *next;
};//定义链表
int main()
{
	int i = 0;
	int nodedata=0;
	char c;
	struct link*head = NULL;
	printf("Do you want to append a new node(Y/N)?");
	scanf(" %c", &c);
	while (c == 'Y' || c == 'y')
	{
		head = AppendNode(head);//新建链表
		DisplyNode(head);//打印链表
		printf("Do you want to append a new node(Y/N)?");
		scanf(" %c", &c);
		i++;
	}
	//printf("%d new nodes have been apended!\n", i);
	//scanf("%d", &nodedata);
	//head = DeleteNode(head, nodedata);//删除链表
	//head = InsertNode(head, nodedata);//插入链表
	/*head = SortNode(head);*///链表排序
	/*head = reverse(head);*///链表反转
	searchmid(head);//链表中查找
	DisplyNode(head);//打印链表
	DeleteMemory(head);//内存释放
	system("pause");
	return 0;
}
struct link* AppendNode(struct link*head)//新建链表
{
	struct link*p = NULL, *pr = head;
	int data;
	p = (struct link*)malloc(sizeof(struct link));
	if (p == NULL)
	{
		printf("No enough memory to allocate!\n");
		exit(0);

	}
	if (head == NULL)
	{
		head = p;
	}
	else
	{
		while (pr->next != NULL)
		{
			pr = pr->next;
		}
		pr->next = p;
	}
		printf("Input node data:");
		scanf("%d", &data);
		p->data = data;
		p->next = NULL;
		return head;
}
void DisplyNode(struct link *head)//打印节点
{
	struct link *p = head;
	int j = 1;
	while (p != NULL)
	{
		printf("%5d%10d\n", j, p->data);
		p = p->next;
		j++;
	}
}

void DeleteMemory(struct link *head)//清除内存
{
	struct link *p = head, *pr = NULL;
	while (p != NULL)
	{
		pr = p;//保存当前节点地址
		p = p->next;
		free(pr);//释放当前节点地址的备份
	}
}
struct link*DeleteNode(struct link *head, int nodedata)//删除指定节点
{
	struct link*p = head, *pr = head;
	if (head == NULL)
	{
		printf("Linked Table is empty!\n");
		return head;
	}
	while (nodedata != p->data&&p ->next != NULL)
	{
		pr = p;//保存上一个节点的地址
		p = p ->next;//指向下一个节点的地址
	}
	if (nodedata == p->data)//判断当前节点
	{
		if (p == head)//删除头节点
		{
			head = p->next;//将头节点的下一个节点赋给头指针
		}
		else
		{
			pr->next = p->next;//待删除节点的上一个节点指向删除节点的下一个节点
		}
		free(p);//释放当前节点
	}
	else
		printf("This Node has not been found!\n");
	return head;
}
struct link*InsertNode(struct link*head, int nodedata)//插入节点
{
	struct link *pr = head, *p = head, *temp = NULL;//中间节点
	p = (struct link*)malloc(sizeof(struct link));//为新节点申请内存
	if (p == NULL)
	{
		printf("No enough memory!\n");
		exit(0);
	}
	p->next = NULL;
	p->data = nodedata;//新节点初始化
	if (head == NULL)//链表为空
	{
		head = p;
	}
	else
	{
		while (pr->data < nodedata&&pr->next != NULL)//链表为空或者节点数据小于当前值
		{
			temp = pr;//保存当前节点上一个节点的地址
			pr = pr->next;//指向下一个节点的地址
		}
		if (pr->data >= nodedata)//满足节点条件
		{
			if (pr == head)//在头节点处插入
			{
				p->next = head;//新节点的下一个指针指向原来的头节点
				head = p;//将新节点赋给当前头指针
			}
			else
			{
				pr = temp;//当前节点的上一个节点
				p->next = pr->next;//上一个节点所指向的下一个节点地址赋给新加节点的下一个地址
				pr->next = p;//上一个节点的下一个地址指向新加节点
			}
		}
		else
		{
			pr->next = p;//在尾部加入新的节点
		}
	}
	return head;//返回头指针
}
struct link* SortNode(struct link *head) //节点数据由高到低 冒泡排序
{
	struct link *pr = head;
	int i = 0, j = 0, temp = 0;
	int k = 0;
	k = LengthNode(head);
	/*if (head == NULL || head->next == NULL)
	{
		return head;
	}*/
	for (i = 1;i < k;i++)//执行k-1次比较
	{
		pr = head;//每次都从头节点开始
		for (j = 0;j < k-i;j++)//执行k-i次比较
		{
			if (pr->data < pr->next->data)//比较当前节点和下一个节点，下一个节点的值大则和当前节点交换位置
			{
				temp = pr->data;
				pr->data = pr->next->data;
				pr->next->data = temp;
			}
			pr = pr->next;//指向下一个节点
		}
	}
	return head;//返回头指针
}
int LengthNode(struct link *head)//统计节点数量
{
	struct link *p = head;
	int j = 0;
	while (p != NULL)//当前节点不为空
	{
		p = p->next;
		j++;//节点数加1
	}
	return j;
}
struct link*reverse(struct link *head)//单链表逆置  未搞懂
{
	struct link*p1 =head, *p2 = p1->next, *p3;
	if (head == NULL || head->next == NULL)//链表为空或者为单节点
	{
		return head;
	}
	while (p2)
	{
		p3 = p2->next;
		p2->next = p1;
		p1 = p2;
		p2 = p3;
	}
	head->next = NULL;.
	head = p1;
	return head;
}
void searchmid(struct link *head)//快慢指针，找到中间的节点 偶数中间，奇数中间两个的后一个
{
	struct link* p = head, *pr = head;//p 快指针2n-1 pr 慢指针n
	if (head == NULL || head ->next == NULL)
	{
		return head;
	}
	int mid;
	while (pr&&pr->next)
	{
		pr = pr->next->next;
		p = p->next;
	}
	mid = p->data;
	printf("%d\n", mid);
}
